
service: auth-test

custom:
  callbackuri: #POPULATE ME
  pool-domain: #POPULATE ME

provider:
  name: aws
  runtime: nodejs12.x
  profile: dev
  stage: dev
  region: eu-central-1

package:
  exclude:
    - layers/**
    - .gitignore
    - serverless.yml
    - README.md

layers:
  nodeLibs:
    path: layers
    description: content of node_modules directory

resources:
  Resources:
    CognitoDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:custom.pool-domain}
        UserPoolId:
          Ref: CognitoUserPoolMyUserPool
    CognitoUserPoolMyUserPool:
      Type: AWS::Cognito::UserPool
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html
      Properties:
        ClientName: user-pool-client
        AllowedOAuthFlowsUserPoolClient: true # this looks like it is required so user can change their password
        UserPoolId:
          Ref: CognitoUserPoolMyUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        CallbackURLs:
          - ${self:custom.callbackuri}
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: Cognito
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - 'Fn::GetAtt': [CognitoUserPoolMyUserPool, Arn]

functions:
  hello:
    handler: handler.hello
    layers:
      - {Ref: NodeLibsLambdaLayer}
    events:
      - http:
          path: hello
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  auth:
    handler: handler.auth
    layers:
      - {Ref: NodeLibsLambdaLayer}
    events:
      - http:
          path: auth
          method: get
